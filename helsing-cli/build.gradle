apply plugin: 'it.gianluz.capsule'

description = 'Command line interface for running necromancer utilities on a code set'

// Need to exclude the real logger from test runs, so use a special configuration to side-step its inclusion in test runs
configurations {
    capsuleRuntime{
        extendsFrom runtime
    }
}

eclipse{
    classpath {
        plusConfigurations += [ configurations.capsuleRuntime ]
    }
}

project.sourceSets {
    main {
        runtimeClasspath += configurations.capsuleRuntime
    }
}

//Dependency versions managed in ${rootDir}/dependencies.properties
dependencies {
	compileOnly 'com.google.code.findbugs:jsr305'
    
    compile project(':helsing-core')
    
    compile 'com.github.javaparser:javaparser-core'
    compile 'info.picocli:picocli'
    compile 'org.ow2.asm:asm'
    compile 'org.slf4j:slf4j-api'
    compile 'org.starchartlabs.alloy:alloy-core'
    
    capsuleRuntime 'org.slf4j:slf4j-simple'
    
    testCompile 'org.testng:testng'
    testCompile 'uk.org.lidalia:slf4j-test'
    
    testRuntime project(':helsing-test-project')
}

// Configure tests with directory for test project
// This requires setting up TestNG run/debug properties within IDE imports to execute tests
test {
    systemProperty 'org.starchartlabs.helsing.test.project.dir', "${project(':helsing-test-project').projectDir}"
}

//Apply module naming to all projects
//Add LICENSE so it is included in all JARs, as well as dependent licenses, fulfilling the "distributions include license" requirement
jar {
    from("${rootDir}"){ include 'LICENSE' }
}

//All projects should provide source code and javadoc, and upload these with any released artifacts
sourcesJar {
    from("${rootDir}"){ include 'LICENSE' }
}

javadocJar{
    from("${rootDir}"){ include 'LICENSE' }
}

task distCapsule(type: FatCapsule) {
    applicationClass 'org.starchartlabs.helsing.cli.CommandLineInterface'
    embedConfiguration configurations.capsuleRuntime
}

tasks.assemble.dependsOn distCapsule

artifacts {
    archives distCapsule
}
